<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="User_Guide">
<title>CREAM User's Guide</title>

<section id="CLI_Guide">
<title>CREAM Command Line Interface Guide</title>

<para>
This section briefly explains the sequence of operations to be performed by a user to submit and then manage jobs
on CREAM based CEs, referring to the C++ Command Line Interface (CLI).
</para>

<section id="Get_Proxy">
<title>Before starting: get your user proxy</title>
<para>
Before using any of the CREAM client commands, it is necessary to have a valid proxy credential available on the client
machine. You can create it using the <literal>voms-proxy-init</literal> command. If you already have a valid proxy 
available on your machine just make the <literal>X509_USER_PROXY</literal> environment variable point to it.
</para>

<para>
In order to get a proxy certificate issued by VOMS, you should have in the directory <literal>/etc/vomses</literal> the 
proper VOMS file containing a line as follows:
<screen>
"EGEE" "kuiken.nikhef.nl" "15001" "/O=dutchgrid/O=hosts/OU=nikhef.nl/CN=kuiken.nikhef.nl" "EGEE" "22"
</screen>
or the corresponding line for your VO. You also need to install the VO related <literal>.lsc</literal> files in the 
<literal>/etc/grid-security/vomsdir/&lt;VO&gt;</literal> directory. In a standard EMI UI installation, these settings 
should be already there.
</para>

<para>
Make moreover sure you have in the directory <literal>$HOME/.globus</literal> your certificate/key pair, 
i.e. the following files:
<itemizedlist>
<listitem><para>usercert.pem</para></listitem>
<listitem><para>userkey.pem</para></listitem>
</itemizedlist>
</para>

<para>Note that file permissions are important: the two files must have respectively 0600 and 0400 permissions.</para>

<para>
Then you can issue the VOMS client command (you will be prompted for the pass-phrase):
<screen>
$ voms-proxy-init -voms dteam
Enter GRID pass phrase:
Your identity: /C=IT/O=INFN/OU=Personal Certificate/L=Padova/CN=Massimo Sgaravatto
Creating temporary proxy ................................................................................. Done
Contacting  voms2.hellasgrid.gr:15004 [/C=GR/O=HellasGrid/OU=hellasgrid.gr/CN=voms2.hellasgrid.gr] "dteam" Done
Creating proxy .............................. Done

Your proxy is valid until Sat Apr 30 05:05:49 2011

$ voms-proxy-info -all
subject   : /C=IT/O=INFN/OU=Personal Certificate/L=Padova/CN=Massimo Sgaravatto/CN=proxy
issuer    : /C=IT/O=INFN/OU=Personal Certificate/L=Padova/CN=Massimo Sgaravatto
identity  : /C=IT/O=INFN/OU=Personal Certificate/L=Padova/CN=Massimo Sgaravatto
type      : proxy
strength  : 1024 bits
path      : /tmp/x509up_u500
timeleft  : 11:59:55
key usage : Digital Signature, Key Encipherment, Data Encipherment
=== VO dteam extension information ===
VO        : dteam
subject   : /C=IT/O=INFN/OU=Personal Certificate/L=Padova/CN=Massimo Sgaravatto
issuer    : /C=GR/O=HellasGrid/OU=hellasgrid.gr/CN=voms2.hellasgrid.gr
attribute : /dteam/Role=NULL/Capability=NULL
attribute : /dteam/italy/Role=NULL/Capability=NULL
attribute : /dteam/italy/INFN-PADOVA/Role=NULL/Capability=NULL
timeleft  : 11:59:55
uri       : voms2.hellasgrid.gr:15004
</screen>
</para>
</section>


<section id="CLI_Commands">
<title>CREAM CLI commands</title>
<para>
The most relevant commands to interact with CREAM based CEs are:
<itemizedlist>
    <listitem><para><literal>glite-ce-job-submit &lt;jdl_file_1&gt; ... &lt;jdl_file_N&gt;</literal>
    submits N jobs (N must be >=1) to a CREAM based CE. It requires N JDL files as input and returns N CREAM job identifiers.</para></listitem>
    <listitem><para><literal>glite-ce-delegate-proxy &lt;delegation_Id&gt;</literal>
    allows the user to delegate her proxy credential to the CREAM service. 
    This delegated credential can then be used for job submissions.</para></listitem>
    <listitem><para><literal>glite-ce-job-status &lt;job_Id_1&gt; ... &lt;job_Id_N&gt;</literal>
    displays information (in particular the states) of N jobs  (N must be >=1) previously submitted to CREAM based CEs.</para></listitem>
    <listitem><para><literal>glite-ce-job-list &lt;host[:port]&gt;</literal>
    lists the identifiers of jobs submitted to a CREAM based CE by the user issuing the command.</para></listitem>
    <listitem><para><literal>glite-ce-job-cancel &lt;job_Id_1&gt; ... &lt;job_Id_N&gt;</literal>
    cancels N jobs (N must be >=1) previously submitted to CREAM based CEs.</para></listitem>
    <listitem><para><literal>glite-ce-job-suspend &lt;job_Id_1&gt; ... &lt;job_Id_N&gt;</literal>
    suspends the execution of N jobs (N must be >=1) previously submitted to CREAM based CEs.</para></listitem>
    <listitem><para><literal>glite-ce-job-resume &lt;job_Id_1&gt; ... &lt;job_Id_N&gt;</literal>
    resumes the execution of N jobs (N must be >=1) which have been previously suspended.</para></listitem>
    <listitem><para><literal>glite-ce-job-output &lt;job_Id_1&gt; ... &lt;job_Id_N&gt;</literal>
    retrieves the output sandbox files of N jobs (N must be >=1) previously submitted to CREAM based CEs.</para></listitem>
    <listitem><para><literal>glite-ce-job-purge &lt;job_Id_1&gt; ... &lt;job_Id_N&gt;</literal>
    clears N jobs (N must be >=1) from CREAM based CEs. After this operation the purged jobs can&rsquo;t be managed anymore.</para></listitem>
    <listitem><para><literal>glite-ce-proxy-renew &lt;delegation_Id_1&gt; ... &lt;delegation_Id_N&gt;</literal>
    renews N delegations (N must be >=1), and therefore refreshes the proxy of the jobs submitted to 
    CREAM based CEs using the considered delegations.</para></listitem>
    <listitem><para><literal>glite-ce-service-info &lt;host[:port]&gt;</literal>
    returns information about the CREAM service (version, status, etc.).</para></listitem>
    <listitem><para><literal>glite-ce-enable-submission &lt;host[:port]&gt;</literal>
    (re-)enables job submissions on the specified CREAM CE.</para></listitem>
    <listitem><para><literal>glite-ce-disable-submission &lt;host[:port]&gt;</literal>
    disables job submissions on the specified CREAM CE.</para></listitem>
    <listitem><para><literal>glite-ce-allowed-submission &lt;host[:port]&gt;</literal>
    checks if jobs submissions on the specified CREAM CE are allowed or have been disabled.</para></listitem>
    <listitem><para><literal>glite-ce-job-lease &lt;lease_identifier&gt; --endpoint &lt;cream_endpoint&gt; --leaseTime &lt;lease_time&gt;</literal>
    create a lease identifier in the CREAM server and associate a time duration to it.</para></listitem>
</itemizedlist>
Man pages are available for all the CREAM client commands. You can also access information about the usage of each command by issuing:
<screen>
$ &lt;command&gt; --help
</screen>
</para>
</section>

<section id="Submitting_jobs">
<title>Submitting jobs to CREAM based CEs</title>
<para>
To submit jobs to CREAM based CEs, the command <literal>glite-ce-job-submit</literal> must be used. 
The <literal>glite-ce-job-submit</literal> command requires as input one or more job description files; 
each  file describes the job characteristics and requirements through the JDL (Job Description Language). 
A typical example of a JDL job description file is:
<screen>
[
Type = "Job";
JobType = "Normal";
Executable = "myexe";
StdInput = "myinput.txt";
StdOutput = "message.txt";
StdError = "error.txt";
InputSandbox = {"/users/seredova/example/myinput.txt",
"/users/seredova/example/myexe"};
OutputSandbox = {"message.txt", "error.txt"};
OutputSandboxBaseDestUri = "gsiftp://se.pd.infn.it/data/seredova";
]
</screen>
Such a JDL would make the <literal>myexe</literal> executable be transferred on the remote CREAM CE and be run taking
the <literal>myinput.txt</literal> file (also copied from the client node) as input. The standard streams of the job are
redirected to files <literal>message.txt</literal> and <literal>error.txt</literal>, and when job completes its execution
they are automatically uploaded on <literal>gsiftp://se.pd.infn.it/data/seredova</literal>.
</para>
<para>
A detailed description of the available JDL attributes and of the rules for building correct JDL files is documented in 
the CREAM JDL <ulink url="http://wiki.italiangrid.org/twiki/bin/view/CREAM/JdlGuide">Guide</ulink>.
</para>
<para>
The jobs submitted to a CREAM based CE are given the delegated credentials of the user who submitted it. 
These credentials can then be used when operations requiring security support has to be performed by the job.
</para>
<para>
There are two possible options to deal with proxy delegation:
<itemizedlist>
    <listitem><para>asking the automatic delegation of the credentials during the submission operation;</para></listitem>
    <listitem><para>explicitly delegating credentials, and then asking to rely on these previously 
    delegated credentials on the actual submission operations.</para></listitem>
</itemizedlist>
It is highly suggested to rely on this latter mechanism, using the same delegated proxy for multiple job submissions, 
instead of delegating each time a proxy. Delegating a proxy, in fact, is an operation that can require a non negligible time.
</para>
<para>
The command <literal>glite-ce-delegate-proxy</literal> is the command to be used to explicitly delegate the user credentials
to a CREAM CE.The following shows an example of job submission, performed explicitly delegating credentials. 
So first of all the credentials are delegated to a CREAM based CE (whose endpoint is specified with 
the option <literal>--endpoint</literal> (<literal>-e</literal>):
<screen>
$ glite-ce-delegate-proxy -e cream-ce-01.pd.infn.it mydelid
2006-02-26 15:03:37,286 NOTICE - Proxy with delegation id [mydelid] successfully
delegated to endpoint [https://cream-ce-01.pd.infn.it:8443//ce-cream/services/CREAMDelegation]
</screen>
</para>
<para>
The identifier of the delegation is then specified with the <literal>--delegationId</literal> (<literal>-D</literal>) option
in the job submit operation:
<screen>
$ glite-ce-job-submit -D mydelid -r cream-ce-01.pd.infn.it:8443/cream-lsf-grid02 myjob1.jdl myjob2.jdl myjob3.jdl
</screen>
The option <literal>-r</literal> (<literal>--resource</literal>) has been used to specify the identifier of the CREAM CE
where the job has to be submitted to.
<literal>myjob1.jdl</literal> <literal>myjob2.jdl</literal> <literal>myjob3.jdl</literal> are the 3 JDL files
describing the jobs to be submitted.
</para>
<para>
The command returns the CREAM job identifiers associated with these jobs 
(e.g. <literal>https://cream-ce-01.pd.infn.it:8443/CREAM116j9vgnf</literal>) which identify them in clear
and unique way all over the Grid system scope.
</para>
<para>
In addition the user can associate a lease that she/he has previously created with the command 
<literal>glite-ce-job-lease</literal> by mean of the option <literal>--leaseId &lt;lease_identifier&gt;</literal>:
<screen>
$ glite-ce-job-submit -D mydelid -r cream-ce-01.pd.infn.it:8443/cream-lsf-grid02 --leaseId &lt;my_lease_identifier&gt; myjob1.jdl myjob2.jdl myjob3.jdl
</screen>
</para>
<para>
To create a lease in the CREAM service, with a certain duration of time (expressed in seconds), issue the command:
<screen>
$ glite-ce-job-lease --endpoint cream-27.pd.infn.it --leaseTime 3600 myLID
You requested lease time [3600] for lease ID [myLID]
CREAM negotiated the lease time to [3600]
</screen>
The above command has created a lease on <literal>cream-27.pd.infn.it</literal> named "myLID" and lasting 1 hour.
</para>
</section>

<section id="Monitoring_jobs">
<title>Monitoring jobs</title>
<para>
Passing the CREAM job identifiers returned by the <literal>glite-ce-job-submit</literal> command to
the <literal>glite-ce-job-status</literal> command, it is possible to monitor the submitted jobs. 
Several (static and dynamic) information can be shown, depending on the chosen verbosity level. 
The verbosity level can be 0 (less verbosity), 1 or 2 (most verbosity).
Please note that specifying 0 as verbosity level means calling on the CREAM service a faster operation 
than when using 1 or 2 as verbosity level. The most relevant attribute is the job status.
</para>
<para>
The following is an example of job status operation, specifying 1 as verbosity level:
<screen>
$ glite-ce-job-status -L 1 https://cream-02.pd.infn.it:8443/CREAM738582717
****** JobID=[https://cream-02.pd.infn.it:8443/CREAM738582717]
Current Status = [DONE-FAILED]
ExitCode = [N/A]
FailureReason = [lsf_reason=256; Cannot move ISB (${globus_transfer_cmd}
gsiftp://cream-02.pd.infn.it//CREAMTests/Exe1/ssh1.sh file:///home/infngrid001/home_cream_738582717/CREAM738582717/ssh1.sh):
error: globus_ftp_client: the server responded with an error 500 500-Command failed. : globus_l_gfs_file_open failed.
500-globus_xio: Unable to open file //CREAMTests/Exe1/ssh1.sh
500-globus_xio: System error in open: No such file or directory
500-globus_xio: A system call failed: No such file or directory 500 End.]
Grid JobID = [N/A]

Job status changes:
-------------------
Status = [REGISTERED] - [Tue 22 Jan 2008 15:55:08] (1201013708)
Status = [PENDING] - [Tue 22 Jan 2008 15:55:08] (1201013708)
Status = [IDLE] - [Tue 22 Jan 2008 15:55:11] (1201013711)
Status = [RUNNING] - [Tue 22 Jan 2008 15:55:18] (1201013718)
Status = [DONE-FAILED] - [Tue 22 Jan 2008 16:03:10] (1201014190)

Issued Commands:
-------------------
*** Command Name = [JOB_REGISTER]
Command Category = [JOB_MANAGEMENT]
Command Status = [SUCCESSFULL]
*** Command Name = [JOB_START]
Command Category = [JOB_MANAGEMENT]
Command Status = [SUCCESSFULL]
</screen>
In this example it is interesting to note that the job failed (as reported by the <literal>Current Status</literal> field)
for the problem reported in the <literal>FailureReason</literal> field: the file to be transferred was not found.
</para>
<para>
Instead of explicitly specifying the identifiers of the jobs to monitor, the user can also ask to monitor all her jobs,
in case specifying conditions (on the submission date and/or on the job status) that must be met.
For example to monitor all jobs, whose status is DONE-OK or DONE-FAILED, submitted to the <literal>grid005.pd.infn.it</literal>
CREAM CE between July 23, 2005 10:00 and July 28, 2005 11:00, the following command must be issued:
<screen>
$ glite-ce-job-status --all -e grid005.pd.infn.it:8443 --from ’2005-07-23 10:00:00’ --to ’2005-07-28 11:00:00’ -s DONE-OK:DONE-FAILED
</screen>
</para>
</section>

<section id="Getting_output">
<title>Retrieving output of jobs</title>
<para>
User can choose to save the output sandbox (OSB) files on a remote server, or save them in the CREAM CE node. 
In the latter case these files can then be retrieved using the <literal>glite-ce-job-output</literal> command.
For example the following command retrieves the output sandbox files of the specified job from the relevant CREAM CE node:
<screen>
$ glite-ce-job-output https://cream-38.pd.infn.it:8443/CREAM295728364
2011-01-29 10:09:50,394 INFO - For JobID [https://cream-38.pd.infn.it:8443/CREAM295728364]
output will be stored in the dir ./cream-38.pd.infn.it_8443_CREAM295728364
</screen>
This command can be used also to retrieve output produced by multiple jobs, by specifying multiple job identifiers
as command's arguments
</para>
</section>

<section id="Getting_jobid">
<title>Getting job identifiers</title>
<para>
If a user is interested to get the identifiers of all her jobs submitted to a specific CREAM CE, she can use the 
<literal>glite-ce-job-list</literal> command. For example the following command returns the identifiers of all the jobs
submitted to the specified CREAM CE, owned by the user issuing the command:
<screen>
$ glite-ce-job-list grid005.pd.infn.it:8443
</screen>
</para>
</section>

<section id="Cancelling_job">
<title>Cancelling jobs</title>
<para>
In some cases it might be needed to cancel jobs which have been previously submitted to CREAM based CEs. 
This can be achieved via the <literal>glite-ce-job-cancel</literal> command. E.g., the command:
<screen>
$ glite-ce-job-cancel https://grid005.pd.infn.it:8443/CREAM115j5vfnf
</screen>
cancels the specified job.
</para>
</section>

<section id="Suspending_job">
<title>Suspending and resuming jobs</title>
<para>
A running or idle job can be suspended (i.e. its execution will be stopped), and be resumed (i.e. it will run again) later. 
This can be achieved with the <literal>glite-ce-job-suspend</literal> and <literal>glite-ce-job-resume</literal> commands.
The following example shows that after having issued the <literal>glite-ce-job-suspend</literal> command, after a while
the job status becomes <literal>HELD</literal>.
<screen>
$ glite-ce-job-suspend https://cream-ce-01.pd.infn.it:8443/CREAM11a79tnb2
Are you sure you want to suspend specified job(s) [y/n]: y
$ glite-ce-job-status -L 0 https://cream-ce-01.pd.infn.it:8443/CREAM11a79tnb2
****** JobID=[https://cream-ce-01.pd.infn.it:8443/CREAM11a79tnb2]
Status = [HELD]
</screen>
Issuing the =glite-ce-job-resume= command, the job will run/will be idle again:
<screen>
$ glite-ce-job-resume https://cream-ce-01.pd.infn.it:8443/CREAM11a79tnb2
Are you sure you want to resume specified job(s) [y/n]: y
$ glite-ce-job-status -L 0 https://cream-ce-01.pd.infn.it:8443/CREAM11a79tnb2
****** JobID=[https://cream-ce-01.pd.infn.it:8443/CREAM11a79tnb2]
Status = [REALLY-RUNNING]
</screen>
</para>
</section>

<section id="Purging_job">
<title>Purging jobs</title>
<para>
A CREAM job can be monitored (via the =glite-ce-job-status=) even after it has completed its execution. 
A job gets &ldquo;lost&rdquo; (i.e. it is not possible to monitor or manage it anymore) only when the user who submitted
it decides to explicitly clear it, or when the CREAM system administrator decides to do this purging operation. 
A user can purge her own jobs, using the <literal>glite-ce-job-purge</literal> command.
E.g., after having issued the command:
<screen>
$ glite-ce-job-purge https://cream-ce-01.pd.infn.it:8443/CREAM116jbi4o0
</screen>
the specified job can&rsquo;t be managed anymore (e.g. it is not possible to check its status anymore).
</para>
</section>

<section id="">
<title>Renewing proxies</title>
<para>
It is possible that long jobs may outlive the validity of the initial delegated credentials; if so the job will die prematurely.
To avoid this it is possible to renew the proxy of jobs submitted to CREAM CEs with the <literal>glite-ce-proxy-renew</literal>
command. E.g. the following command:
<screen>
$ glite-ce-proxy-renew -e cream-ce-01.pd.infn.it:8443 mydelid
</screen>
renews the proxy of all the jobs having <literal>mydelid</literal> as delegation id.
It must be stressed that for jobs submitted to CREAM based CEs via the Workload Management System (WMS),
proxy renewal is automatically dealt by the middleware.
</para>
</section>

<section id="Handling_job">
<title>Handling job identifiers</title>
<para>
Handling the job identifiers directly quickly becomes tedious. To avoid this, you can make the <literal>glite-ce-job-submit</literal>
and <literal>glite-ce-job-list</literal> commands append the job Id(s) to a named file using the <literal>--output</literal>
(<literal>-o</literal>) option. On the other side, the CREAM client commands which take job identifier(s) as argument accept also
the <literal>--input</literal> (<literal>-i</literal>) option which allows the job identifier(s) to be read from a file.
The following shows an example:
<screen>
$ glite-ce-job-submit -a -r cream-ce-01.pd.infn.it:8443/cream-lsf-grid02 -o idfile myjob.jdl
https://cream-ce-01.pd.infn.it:8443/CREAM116jbs5b9
</screen>
The returned job id got also inserted in the specified file (<literal>idfile</literal>), which can be specified with 
the <literal>--input</literal> (<literal>-i</literal>) option e.g. with the <literal>glite-ce-job-status</literal> command:
<screen>
$ glite-ce-job-status -i idfile
****** JobID=[https://cream-ce-01.pd.infn.it:8443/CREAM116jbs5b9]
Status=[REALLY-RUNNING]
</screen>
</para>
</section>

<section id="Restrict_submission">
<title>Restricting job submissions</title>
<para>
In order to prevent that a CREAM CE gets overloaded, the CREAM CE administrator can set a specific policy to disable
new job submissions when certain conditions are met. If submissions are disabled because of that, if newer job submissions are attempted,
users will get an error message such as:
<screen>
$ glite-ce-job-submit -a -r cream-38.pd.infn.it:8443/cream-pbs-creamtest1 oo.jdl
MethodName=[jobRegister] ErrorCode=[0] Description=[The CREAM service cannot accept jobs at the moment]
FaultCause=[Threshold for Load Average(1 min): 30 => Detected value for Load Average(1 min): 31.13]
Timestamp=[Sat 29 Jan 2011 11:55:18]
</screen>
</para>
<para>
In order to avoid degrading the performance of the system, the specified policy is not evaluated for each job submission, but instead
it is evaluated and imposed from time to time (so it might happen that for a short time job submissions are allowed even if the specified
threshold has been reached).
CREAM &ldquo;super-users&rdquo; can also disable newer job submissions via the command <literal>glite-ce-disable-submission</literal>. 
Submissions can then be re-enabled by a CREAM &ldquo;super-user&rdquo; via the command <literal>glite-ce-enable-submission</literal>.
To check if job submissions on a specific CREAM CE are allowed, the command <literal>glite-ce-allowed-submission</literal> can be used.
<screen>
$ glite-ce-disable-submission grid006.pd.infn.it:8443
Operation for disabling new submissions succeeded

$ glite-ce-allowed-submission grid006.pd.infn.it:8443
Job Submission to this CREAM CE is disabled

$ glite-ce-enable-submission grid006.pd.infn.it:8443
Operation for enabling new submissions succeeded

$ glite-ce-allowed-submission grid006.pd.infn.it:8443
Job Submission to this CREAM CE is enabled
</screen>
It must be stressed that if job submissions to a specific CREAM CE are disabled, all other operations (job status, job cancellations, etc.)
can still be performed.
</para>
</section>

<section id="Getting_info">
<title>Getting information about the CREAM service</title>
<para>
It is possible to get information about the CREAM service (interface and service version, status, etc) using 
the <literal>glite-ce-service-info</literal> command, e.g.:
<screen>
$ glite-ce-service-info cream-13.pd.infn.it:8443
Interface Version = [2.1]
Service Version = [1.12]
Description = [CREAM 2]
Started at = [Tue Nov 10 14:42:12 2009]
Submission enabled = [YES]
Status = [RUNNING]
Service Property = [SUBMISSION_THRESHOLD_MESSAGE]->
[Threshold for Load Average
(1 min): 10 => Detected value for Load Average(1 min): 0.03
Threshold for Load Average(5 min): 10 => Detected value for Load Average(5 min): 0.03
Threshold for Load Average(15 min): 10 => Detected value for Load Average(15 min): 0.00
Threshold for Memory Usage: 95 => Detected value for Memory Usage: 57.41%
Threshold for Swap Usage: 95 => Detected value for Swap Usage: 2.02%
Threshold for Free FD: 500 => Detected value for Free FD: 204500
Threshold for tomcat FD: 800 => Detected value for Tomcat FD: 107
Threshold for FTP Connection: 30 => Detected value for FTP Connection: 1
Threshold for Number of active jobs: -1 => Detected value for Number of active jobs: 0
Threshold for Number of pending commands: -1 => Detected value for Number of pending commands: 0
</screen>
</para>
</section>

<section id="CLI_conffile">
<title>CREAM CLI configuration files</title>
<para>
The configuration of the CREAM UI is accomplished via three possible configuration files:
<itemizedlist>
    <listitem><para>A general configuration file. This file is looked for in 
    <literal>/etc/glite_cream.conf</literal></para></listitem>
    <listitem><para>A VO specific configuration file. This file is looked for in 
    <literal>/etc/&lt;VO&gt;/glite_cream.conf</literal></para></listitem>
    <listitem><para>A user specific configuration file. This file is looked for in the following order:
    <itemizedlist>
        <listitem><para>The file specified with the <literal>--conf</literal> option of the considered command</para></listitem>
        <listitem><para>The file referenced by the <literal>$GLITE_CREAM_CLIENT_CONFIG</literal> 
        environment variable</para></listitem>
        <listitem><para><literal>$HOME/.glite/&lt;VO&gt;/glite_cream.conf</literal> (if the VO is defined), 
        or <literal>$HOME/.glite/glite_cream.conf</literal> otherwise</para></listitem>
    </itemizedlist>
    </para></listitem>
</itemizedlist>
Each of these files is a classad containing definitions. If the same attribute is defined in more configuration file, 
the definition in the user specific configuration file (if any) is considered. Likewise the definitions in the VO specific
configuration file have higher priority than the ones specified in the general configuration file.
It must be noted that one or more (even all) of these three configuration files can be missing.
</para>
<para>
We list here the possible attributes that can be specified in the configuration files:
<table frame="all">
<tgroup cols='3'>
<thead>
<row><entry>Name</entry><entry>Description</entry><entry>Default</entry></row>
</thead>
<tbody>
<row>
    <entry>CREAM_URL_PREFIX</entry>
    <entry>the prefix to the <literal>&lt;hostname&gt;:&lt;port&gt;</literal> to build the CREAM service endpoint</entry>
    <entry>https://</entry>
</row>
<row>
    <entry>CREAMDELEGATION_URL_PREFIX</entry>
    <entry>the prefix to the <literal>&lt;hostname&gt;:&lt;port&gt;</literal> to build the CREAM delegation
    service endpoint</entry>
    <entry>https://</entry>
</row>
<row>
    <entry>DEFAULT_CREAM_TCPPORT</entry>
    <entry>the port to be appended to the hostname (if not specified by the user) to build the CREAM and CREAM delegation
    service endpoint</entry>
    <entry>8443</entry>
</row>
<row>
    <entry>CREAM_URL_POSTFIX</entry>
    <entry>the postfix to be appended to the <literal>&lt;hostname&gt;:&lt;port&gt;</literal>
    to build the CREAM service endpoint</entry>
    <entry>/ce-cream/services/CREAM2</entry>
</row>
<row>
    <entry>CREAMDELEGATION_URL_POSTFIX</entry>
    <entry>the postfix to be appended to the <literal>&lt;hostname&gt;:&lt;port&gt;</literal> to build
    the CREAM delegation service endpoint</entry>
    <entry>/ce-cream/services/gridsite-delegation</entry>
</row>
<row>
    <entry>JDL_DEFAULT_ATTRIBUTES</entry>
    <entry>the classad that must be included by default in the user's JDLs</entry>
    <entry>empty classad</entry>
</row>
<row>
    <entry>STATUS_VERBOSITY_LEVEL</entry>
    <entry>the default verbosity level to be used for the <literal>glite-ce-job-status</literal> command</entry>
    <entry>0</entry>
</row>
<row>
    <entry>UBERFTP_CLIENT</entry>
    <entry>is the pathname of the <literal>uberftp</literal> client executable</entry>
    <entry>/usr/bin/uberftp</entry>
</row>
<row>
    <entry>SUBMIT_LOG_DIR</entry>
    <entry>the directory where by default the log file 
    <literal>glite-ce-job-submit_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal> 
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-submit</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>DELEGATE_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-delegate-proxy_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-delegate-proxy</literal> command) is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>STATUS_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-status_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the glite-ce-job-status command) is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>LIST_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-list_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal> 
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-list</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>SUSPEND_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-suspend_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-suspend</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>RESUME_LOG_DIR</entry>
    <entry>the directory where by default the log file 
    <literal>glite-ce-job-resume_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-resume</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>CANCEL_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-cancel_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-cancel</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>JOBOUTPUT_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-output_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-output</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>PURGE_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-purge_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-purge</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>ALLOWEDSUB_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-allowed-submission_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-allowed-submission</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>ENABLE_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-enable-submission_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-enable-submission</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>DISABLE_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-disable-submission_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-disable-submission</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>PROXYRENEW_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-proxy-renew_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-proxy-renew</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>GETSERVICEINFO_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-service-info_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-service-info</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
<row>
    <entry>LEASE_LOG_DIR</entry>
    <entry>the directory where by default the log file
    <literal>glite-ce-job-lease_CREAM_&lt;username&gt;_&lt;date&gt;_&lt;time&gt;.log</literal>
    (created when the <literal>--debug</literal> option is used with the <literal>glite-ce-job-lease</literal> command)
    is created</entry>
    <entry>/tmp/glite_cream_cli_logs</entry>
</row>
</tbody>
</tgroup>
</table>
As mentioned above, if the same attribute is defined in more than a configuration file, the definition in the user specific
configuration file (if any) has higher priority than the definition in the VO specific configuration file (if any)
which has higher priority than the definition in the generic configuration file. If an attribute is not defined anywhere,
the default value is considered.
</para>
</section>

</section><!-- end of CLI_Guide -->

<section id="CE_uses">
<title>Use specific functionality of the CREAM CE</title>

<section id="Forward_reqs">
<title>Forward of requirements to the batch system</title>

<para>
The CREAM CE allows to forward, via tha BLAH component, requirements to the batch system.
For this purpose the JDL <literal>CERequirements</literal> attribute, described at in the CREAM JDL 
<ulink url="http://wiki.italiangrid.org/twiki/bin/view/CREAM/JdlGuide#3_27_CERequirements">Guide</ulink>, can be used.
For direct submissions to the CREAM CE (e.g. jobs submitted to the CREAM CE using the CREAM CLI 
<literal>glite-ce-job-submit</literal> command) the CeRequirements attribute is supposed to be filled by the end-user.
For jobs submitted to the CREAM CE via the WMS, the <literal>CeRequirements</literal> attribute is instead filled by the WMS,
considering the JDL <literal>Requirements</literal> expression and the value of the <literal>CeForwardParameters</literal>
attribute in the WMS configuration file.
</para>
<para>
For example, if in the user JDL there is :
<screen>
Requirements= "other.GlueHostMainMemoryRAMSize > 100 &amp;&amp; other.GlueCEImplementationName==\"CREAM\"";
</screen>
and if the WMS configuration file there is:
<screen>
CeForwardParameters  = {"GlueHostMainMemoryVirtualSize","GlueHostMainMemoryRAMSize", "GlueCEPolicyMaxCPUTime"};
</screen>
in the JDL sent by the WMS to CREAM there will be:
<screen>
CeRequirements= "other.GlueHostMainMemoryRAMSize > 100";
</screen>
</para>
<para>
The <literal>CERequirements</literal> expression received by CREAM is then forwarded to BLAH.
Basically BLAH manages the <literal>CERequirements</literal> expression setting some environment variables,
which are available and can be properly used by the <literal>/usr/libexec/xxx_local_submit_attributes.sh</literal> script
(e.g. <literal>/usr/libexec/pbs_local_submit_attributes.sh</literal> for PBS/Torque,
<literal>/usr/libexec/lsf_local_submit_attributes.sh</literal> for LSF). This script must be properly created by the site admin.
</para>
<para>
For example, considering the following CeRequirements expression:
<screen>
CeRequirements="other.GlueHostMainMemoryRAMSize > 100 &amp;&amp; other.GlueCEStateWaitingJobs &lt;10 &amp;&amp; \
other.GlueCEImplementationName==\"CREAM\" &amp;&amp; other.GlueHostProcessorClockSpeed >= 2800 &amp;&amp; \
(Member(\"FDTD\", other.GlueHostApplicationSoftwareRuntimeEnvironment))";
</screen>
the following settings will be available in <literal>$USR_LOCATION/libexec/xxx_local_submit_attributes.sh</literal>:
<screen>
GlueHostMainMemoryRAMSize_Min='100'
GlueCEStateWaitingJobs_Max='10'
GlueCEImplementationName='CREAM'
GlueHostProcessorClockSpeed_Min='2800'
GlueHostApplicationSoftwareRuntimeEnvironment='"FDTD"'
</screen>
where the value for $USR_LOCATION in a standard installation of a CREAM CE is "/usr".
What is printed by the <literal>/usr/libexec/xxx_local_submit_attributes.sh</literal> script is automatically added
to the submit command file. For example if the JDL <literal>CeRequirements</literal> expression is:
<screen>
CeRequirements = "(Member(\"FDTD\", other.GlueHostApplicationSoftwareRuntimeEnvironment))";
</screen>
and the =/usr/libexec/pbs_local_submit_attributes.sh= is:
<screen>
#!/bin/sh
if [ "$other.GlueHostApplicationSoftwareRuntimeEnvironment" == "FDTD" ]; then
 echo "#PBS -l software=FDTD"
fi
</screen>
then the PBS submit file that will be used will include:
<screen>
...
...
# PBS directives:
#PBS -S /bin/bash
#PBS -o /dev/null
#PBS -e /dev/null
#PBS -l software=FDTD
....
....
</screen>
where the line:
<screen>
#PBS -l software=FDTD
</screen>
is set via the <literal>/usr/libexec/pbs_local_submit_attributes.sh</literal> script.
</para>
<para>
Please note that there are no differences if in <literal>CeRequirements</literal> expresssion there is e.g.
<screen>CeRequirements = other.xyz==\"ABC\"</screen> or: <screen>CeRequirements = "xyz==\"ABC\"";</screen>
In both cases in <literal>/usr/libexec/xxx_local_submit_attributes.sh</literal> the variable <literal>xyz</literal> will be set.
As shown above, having <literal>x&gt;a</literal> or <literal>x&gt;=a</literal> doesn't make any difference in the setting of 
the environment variable <literal>x</literal> in the <literal>/usr/libexec/xxx_local_submit_attributes.sh</literal> script.
It will be in both cases: <screen> x_Min='a' </screen>
</para>
<para>
Starting with BLAH v. 1.18 it is possible to forward to the batch system also other attributes not included
in the <literal>CeRequiments</literal> JDL attribute.
This can be done adding in =/etc/blah.config= the line:
<screen>
blah_pass_all_submit_attributes=yes
</screen>
In this way the <literal>xxx_local_submit_attributes.sh</literal> will see the following environment variables set:
<itemizedlist>
    <listitem><para>gridType</para></listitem>
    <listitem><para>x509UserProxyFQAN</para></listitem>
    <listitem><para>uniquejobid</para></listitem>
    <listitem><para>queue</para></listitem>
    <listitem><para>ceid</para></listitem>
    <listitem><para>VirtualOrganisation</para></listitem>
    <listitem><para>ClientJobId</para></listitem>
    <listitem><para>x509UserProxySubject</para></listitem>
</itemizedlist>
It is also possible to specify that only some attributes must be forwarded in the batch system setting
in <literal>blah.config</literal> e.g.:
<screen>
blah_pass_submit_attributes[0]="x509UserProxySubject"
blah_pass_submit_attributes[1]="x509UserProxyFQAN"
</screen>
</para>
</section>

</section> <!-- end of CE_uses -->


<section id="CREAM_states">
<title>CREAM job states</title>
<para>
Here below is provided a brief description of the meaning of each possible state a CREAM job can enter:
<itemizedlist>
    <listitem><para><literal>REGISTERED</literal>: the job has been registered but it has not been started yet.</para></listitem>
    <listitem><para><literal>PENDING</literal> the job has been started, but it has still to be submitted to 
    the LRMS abstraction layer module (i.e. BLAH).</para></listitem>
    <listitem><para><literal>IDLE</literal>: the job is idle in the Local Resource Management System (LRMS).</para></listitem>
    <listitem><para><literal>RUNNING</literal>: the job wrapper, which &ldquo;encompasses&rdquo; the user job, 
    is running in the LRMS.</para></listitem>
    <listitem><para><literal>REALLY-RUNNING</literal>: the actual user job (the one specified as Executable in the job JDL)
    is running in the LRMS.</para></listitem>
    <listitem><para><literal>HELD</literal>: the job is held (suspended) in the LRMS.</para></listitem>
    <listitem><para><literal>CANCELLED</literal>: the job has been cancelled.</para></listitem>
    <listitem><para><literal>DONE-OK</literal>: the job has successfully been executed.</para></listitem>
    <listitem><para><literal>DONE-FAILED</literal>: the job has been executed, but some errors occurred.</para></listitem>
    <listitem><para><literal>ABORTED</literal>: errors occurred during the &ldquo;management&rdquo; of the job,
    e.g. the submission to the LRMS abstraction layer software (BLAH) failed.</para></listitem>
    <listitem><para><literal>UNKNOWN</literal>: the job is an unknown status.</para></listitem>
</itemizedlist>
</para>
<para>
The following figure shows the possible job states transitions.
<mediaobject>
<imageobject>
  <imagedata fileref="./images/cream_job_states.png" />
</imageobject>
</mediaobject>
</para>
</section><!-- end of CREAM_states -->


</chapter>
